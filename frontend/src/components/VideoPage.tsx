import { Link, useParams } from 'react-router-dom';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import api from '../api/axios';
import { useContext, useEffect, useRef } from 'react';

import VideoPlayer from './VideoPlayer';
import CommentArea from './CommentArea';
import { AuthCtx } from './AuthProvider';

interface Video {
  ID: string;
  Title: string;
  Description: string;
  ObjectName: string;
  User: {
    Username: string;
  };
  CreatedAt: string;
  Views: number;
  Summary: string;
  SummaryModel: string;
  Likes: number;
  IsLiked: boolean;
}

export default function VideoPage() {
  const { id } = useParams();
  const queryClient = useQueryClient();
  const viewIncremented = useRef(false);
  const auth = useContext(AuthCtx);

  const { data: video, isLoading, error } = useQuery<Video>({
    queryKey: ['video', id],
    queryFn: () => api.get(`/v1/videos/${id}`).then(res => res.data),
    enabled: !!id && !auth?.loading, // <-- Wait for auth to be loaded
  });

  const likeMutation = useMutation({
    mutationFn: () => api.post(`/v1/videos/${id}/like`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['video', id] });
    },
  });

  useEffect(() => {
    if (id && !viewIncremented.current) {
      const incrementView = async () => {
        try {
          await api.post(`/v1/videos/${id}/view`);
          queryClient.invalidateQueries({ queryKey: ['video', id] });
        } catch (err) {
          console.error("Failed to increment view count", err);
        }
      };
      incrementView();
      viewIncremented.current = true;
    }
  }, [id, queryClient]);

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>An error occurred: {error.message}</div>;
  if (!video) return <div>Video not found</div>;

  const videoSrc = `${import.meta.env.VITE_GCS_URL}/${video.ObjectName}`;

  return (
    <div className="container mx-auto p-4 max-w-4xl w-full">
      
      <div className="flex flex-col gap-8">
        <div>
          <VideoPlayer src={videoSrc} autoPlay />
          <div className="mt-4">
            <h1 className="text-2xl font-bold">{video.Title}</h1>
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }} className="mt-2">
              <div className="text-gray-600">Uploaded by: {video.User.Username}</div>
              {auth?.user && (
                <>
                  <button onClick={() => likeMutation.mutate()} className={`px-4 py-2 rounded-lg ${video.IsLiked ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>
                    Like
                  </button>
                  <span>Liked: {video.IsLiked ? 'True' : 'False'}</span>
                </>
              )}
            </div>
            <div className="text-gray-600 mt-2">{video.Views} views â€¢ {new Date(video.CreatedAt).toLocaleDateString()}</div>
            <div className="mt-4">
              <h2 className="text-base font-bold">Description</h2>
              <p className="text-base whitespace-pre-wrap">{video.Description}</p>
            </div>
            {video.Summary && (
              <div className="mt-4">
                <h2 className="text-base font-bold">Summary generated by {video.SummaryModel}</h2>
                <p className="text-base">{video.Summary}</p>
              </div>
            )}
          </div>
        </div>
        <div>
          <CommentArea videoId={video.ID} />
        </div>
      </div>
    </div>
  );
}
